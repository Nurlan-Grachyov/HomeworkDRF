name: Django CI
on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install

      - name: Build and start services
        run: |
          docker-compose up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done

      - name: Run migrations
        run: |
          poetry run python manage.py migrate

      - name: Run tests
        run: |
          poetry run python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Generate .env on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cat <<EOT > ${{ secrets.DEPLOY_DIR }}/.env
          DEBUG=False
          SECRET_KEY=${{ secrets.ENV_SECRET_KEY }}
          ALLOWED_HOSTS=${{ secrets.ENV_ALLOWED_HOSTS }}
          DB_NAME=${{ secrets.ENV_DB_NAME }}
          DB_USER=${{ secrets.ENV_DB_USER }}
          DB_PASSWORD=${{ secrets.ENV_DB_PASSWORD }}
          EOT
          EOF

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            curl -sSL https://install.python-poetry.org | python -
            poetry install
          EOF

      - name: Apply migrations on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            poetry run python manage.py migrate
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py collectstatic --noinput
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart myapp.service
          EOF